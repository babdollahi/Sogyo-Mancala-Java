import java.text.SimpleDateFormat
import java.util.Date

plugins {
    // Tell Gradle that we are builing java as a library (non-executable piece of code intended for use by other applications).
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
}

repositories {
    // Specify the repository mirror that we want to download our dependencies from. Maven Central is configured by default when creating a new Gradle project.
    mavenCentral()
}

dependencies {
    // Download JUnit so that we can use it in our tests.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.8.2"
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'

}

test {
    // For running our tests, use the test runner provided by JUnit.
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run

}


// Configure the Jacoco plugin
jacoco {
    toolVersion = "0.8.8"
}

// Specify where the code coverage reports should be generated
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

checkstyle {
    configFile file("../config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("../config/checkstyle/suppressions.xml").absolutePath
    maxErrors = 15
}

checkstyleMain {
    source = 'src/main/java'
}


task printVersionInfo {
    doLast {
        println "Version Information:"
        def buildTime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        def buildNumber = "1.0.${buildTime}"
        def gitCommitHash = "git rev-parse --short HEAD".execute().text.trim()
        def branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
        println "Build Number: $buildNumber"
        println "Build Time: $buildTime"
        println "Branch Name: $branchName"
        println "Commit Hash: $gitCommitHash"
    }
}



